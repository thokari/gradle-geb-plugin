import javax.security.auth.login.ConfigurationSpi;

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'

repositories { jcenter() }

dependencies {
	compile gradleApi()
	compile localGroovy()

	def gradleDowloadDep = 'de.undercouch:gradle-download-task:1.0'
	def ghostdriverDep = "com.github.detro.ghostdriver:phantomjsdriver:${ghostdriverVersion}"
	def gebDep = "org.gebish:geb-core:${gebVersion}"

	compile gradleDowloadDep
	compile(ghostdriverDep) { exclude group: "org.seleniumhq.selenium", module: "selenium-java"}
	compile gebDep

	runtime gradleDowloadDep
	runtime(ghostdriverDep) { exclude group: "org.seleniumhq.selenium", module: "selenium-java"}
	runtime gebDep
}

task sourceJar(type: Jar) {
	from sourceSets.main.java
	classifier = 'sources'
}

group = 'de.thokari'
version = '0.3-SNAPSHOT'

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourceJar

			project.configurations[JavaPlugin.RUNTIME_CONFIGURATION_NAME].allDependencies.findAll {
				it instanceof ModuleDependency && !it.excludeRules.isEmpty()
			}.each { ModuleDependency dep ->
				pom.withXml {
					def xmlDep = asNode().dependencies.dependency.find {
						it.groupId[0].text() == dep.group && it.artifactId[0].text() == dep.name
					}
					def xmlExclusions = xmlDep.exclusions[0]
					if (!xmlExclusions) xmlExclusions = xmlDep.appendNode('exclusions')

					dep.excludeRules.each { ExcludeRule rule ->
						def xmlExclusion = xmlExclusions.appendNode('exclusion')
						xmlExclusion.appendNode('groupId', rule.group)
						xmlExclusion.appendNode('artifactId', rule.module)
					}
				}
			}
		}
	}
}
